import smtplib, sslimport emailfrom email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartimport imaplibimport loggingimport hashlibimport database_Server as dbfrom urllib.request import urlopendef computeMD5hash(my_string):    m = hashlib.md5()    m.update(my_string.encode('utf-8'))    return m.hexdigest()def is_internet_available():    return True    # try:    #     urlopen('https://www.google.com', timeout=1)    #     return True    # except:    #     #return False    #     return Truedef _sendregemail(email_content):    logging.info(email_content)    sender_email = "suneethactel@gmail.com"    receiver_email = email_content['ship_email']    password = 'cteladmin'    email_content['ship_email_pwd'] = computeMD5hash(email_content['ship_email_pwd'])    email_content['ship_email']=email_content['ship_email'].lower()    # Create the plain-text and HTML version of your message    #text    html = """\    <html>      <body>        <p>Hi,<br>           Registration Details<br>           <table>           <tr><td>Ship Name :</td><td>{ship_name}</td></tr>           <tr><td>Email :</td><td>{ship_email}</td></tr>           <tr><td>Email Password :</td><td>{ship_email_pwd}</td></tr>           <tr><td>System Username :</td><td>{ship_username}</td></tr>           <tr><td>System Password :</td><td>{lpgin_pwd}</td></tr>           <tr><td>Country :</td><td>{ship_country}</td></tr>           <tr><td>Ship start point :</td><td>{call_sign}</td></tr>           <tr><td>Ship end point :</td><td>{imo_number}</td></tr>           </table>        </p>        <p>Regards,<br>        SHES Team</p>      </body>    </html>    """    html=html.format(ship_name=email_content['ship_name'],                      ship_email=email_content['ship_email'], ship_email_pwd=email_content['ship_email_pwd'], \                      lpgin_pwd=email_content['lpgin_pwd'],call_sign=email_content['call_sign'], \                     imo_number=email_content['imo_number'],ship_country=email_content['ship_country'],\                     ship_username=email_content['ship_username'])    #message = MIMEMultipart("alternative", None, [MIMEText(text), MIMEText(html, 'html')])    message = MIMEMultipart("alternative", None, [MIMEText(html, 'html')])    message["Subject"] = "Ship Registration Details"    message["From"] = sender_email    message["To"] = receiver_email    # Create secure connection with server and send email    if is_internet_available():        try:            context = ssl.create_default_context()            with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:                server.login(sender_email, password)                server.sendmail(sender_email, receiver_email.lower(), message.as_string())                server.close()        except smtplib.SMTPRecipientsRefused as e:            return "Invali Email ID"        # except Exception as e:        #     return "Something Went Wrong"    else:        return "Network Issues, Please check your Internet"    email_content['lpgin_pwd']= computeMD5hash(email_content['lpgin_pwd'])    msgTxt = db._userregi(email_content)    return msgTxtdef readEmail():    mail = imaplib.IMAP4_SSL('imap.gmail.com')    mail.login('suneethactel@gmail.com', 'cteladmin')    mail.list()    mail.select('inbox')    result, data = mail.uid('search', None, "ALL")    i = len(data[0].split())    for x in range(i):        latest_email_uid = data[0].split()[x]        result, email_data = mail.uid('fetch', latest_email_uid, '(RFC822)')        raw_email = email_data[0][1]        raw_email_string = raw_email.decode('utf-8')        email_message = email.message_from_string(raw_email_string)    for part in email_message.walk():        if part.get_content_type() == "text/plain":            body = part.get_payload(decode=True)            save_string = r"F:\result\email_" + str(x) + ".txt"            myfile = open(save_string, 'a')            myfile.write(body.decode('utf-8'))            myfile.close()        else:            continue